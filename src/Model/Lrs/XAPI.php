<?php

namespace PowerTLA\Model\LRS;

abstract class XAPI extends \RESTling\Model
{
    const VERB_VOIDED = "http://adlnet.gov/expapi/verbs/voided";

    protected $deferFetch = null;
    protected $table  = null;
    protected $fields = "";
    protected $filter = [];
    protected $order  = [];
    protected $limit  = 0;

    protected $user = [];

    /** **********************************************************************
     * Abstract interface methods
     *  **********************************************************************
     */

    /**
     * an implementing system MUST return an instance to its corresponding
     * webfinger model (e.g. \PowerTLA\Model\Identity\Webfinger\Moodle).
     *
     * @param type
     * @return void
     */
    abstract protected function getWebfingerModel();
    abstract protected function findDataByAttr($tableName, $attrMap, $dataField = ["*"]);
    abstract protected function filterDataByAttr($tableName, $attrMap, $dataField = ["*"]);

    abstract protected function addData($tableName, $attrMap);
    abstract protected function deleteData($tableName, $attrMap);
    abstract protected function updateData($tableName, $attrMap);
    abstract protected function fetchStream($output);

    /** **********************************************************************
     * Operation methods
     *  **********************************************************************
     */

    public function xapiVersion($input) {
        $this->data = ["version" => $this->getVersion()];
    }

    /**
     * statement query interface
     */
    public function queryStatements($input) {
        $statementid = "";
        $voided = false;

        if ($input->hasParameter("statementId", "query")) {
            $statementid = $input->getParameter("statementId", "query");
        }
        elseif ($input->hasParameter("voidedStatementId", "query")) {
            $statementid = $input->getParameter("voidedStatementId", "query");
            $voided = true;
        }

        // figure out to which parts of the LRS the active user has access
        // otherise its always to your own
        $this->user = $input->getUser();

        if (!empty($statementid)) {
            $this->data = $this->findStatementByUUID($statementid, $voided);
        }
        else {
            // filter an activity stream
            $filter = $input->getParameter(["verb", "activity", "registration", "agent"]);
            $order = ["issued" => "desc"];

            $limit = $input->getParameter("limit", "query");
            if (!$limit || $limit <= 0) {
                $limit = 0;
            }

            $filter["issued"] = [
                $this->handleTimestamp($input->getParameter("since", "query")),
                $this->handleTimestamp($input->getParameter("until", "query"))
            ];

            if ($input->hasParameter("ascendig", "query") &&
                $input->getParameter("ascendig", "query")) {
                 $order = ["issued" => "asc"];
            }

            $this->getActivtyStream($filter, $order, $limit);
        }
    }

    /**
     * stores one statements
     */
    public function storeSingleStatement($input) {
        // this should be generated by the service runtime
        // if (!$input->hasParameter("statementId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        $id = $input->getParameter("statementId", "query");
        $this->user = $input->getUser();

        $xStatement = $input->getBody();
        if (empty($xStatement)) {
            throw new \PowerTLA\Exception\MissingXapiStatement();
        }

        if (!array_key_exists("id", $xStatement) || $xStatement["id"] != $id) {
            throw new \PowerTLA\Exception\InvalidXapiStatementForId();
        }

        $id = $xStatement["id"];
        // if a statement id exists, we MUST NOT store it
        try {
            $statement = $this->findStatementByUUID($id);
        }
        catch (Exception $err) {
            // NO OP - because we don't want to find a statement
        }

        if ($statement) {
            // if $statement and $xapiStatement are not the same
            // we SHOULD return a conflict (2.1.1 Requirement 2)
            $this->compareXapiObject($statement, $xStatement);
            // We MUST NOT handle the statement!
        }
        else {
            $this->handleXapiStatement($xStatement);
        }
    }

    /**
     * stores one or more statements
     */
    public function storeStatements($input) {
        // get the JSON body
        $xStatement = $input->getBody();

        // find out whether we handle one or many objects
        if (array_key_exists("verb", $xStatement)) {
            $this->handleXapiStatement($xStatement);
        }
        else {
            // handle multiple statements
            // first check for duplicate ids (III.2.1.2 point 6)
            $ids = [];
            foreach ($xStatement as $v) {
                if (array_key_exists("id", $v) && $v["id"]) {
                    if(in_array($v["id"], $ids)) {
                        throw new \RESTling\Exception\BadRequest();
                    }

                    $ids[] = $v["id"];

                    try {
                        $statement = $this->findStatementByUUID($v["id"]);
                    }
                    catch (Exception $err) {
                        // NO OP - because we don't want to find a statement
                    }

                    if ($statement) {
                        // if $statement and $xapiStatement are not the same
                        // we SHOULD return a conflict (2.1.1 Requirement 2)
                        $this->compareXapiObject($statement, $xStatement);
                        // We MUST NOT handle any other statement! (2.1.2 requirement 4 & 5)
                        return;
                    }
                }
            }

            foreach ($xStatement as $v) {
                $this->handleXapiStatement($v);
            }
        }
    }

    /**
     * statement query interface on /activities (2.5)
     */
    public function loadActivityDescription($input) {
        throw new \RESTling\Exception\NotImplemented();
    }

    /**
     * statement query interface on /agent (2.4)
     */
    public function loadAgentResource($input) {
        throw new \RESTling\Exception\NotImplemented();
    }

    /**
     * return agent profiles (2.6)
     */
    public function queryAgentProfiles($input) {
        $filter = $input->getParameter(["agent", "profileId"], "query");
        $filter["restype"] = "agents/profile";

        // if (!$input->hasParameter("agent", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        if ($input->hasParameter("profileId", "query")) {
            $this->data = $this->findDocumentByAttr($filter);
        }
        else {
            if ($input->hasParameter("since", "query")) {
                $filter["issued"] = [
                    $this->handleTimestamp($input->getParameter("since", "query")),
                    null
                ];
            }
            $this->getDocumentStream($filter);
        }
    }

    /**
     * return agent profiles
     */
    public function storeAgentProfile($input) {
        $filter = $this->verifyAgentProfileParameters($input);
        $this->addDocument($input->getBody(), $filter);
    }

    /**
     * return agent profiles
     */
    public function updateAgentProfile($input) {
        $filter = $this->verifyAgentProfileParameters($input);
        $this->updateDocument($input->getBody(), $filter);
    }

    /**
     * return agent profiles
     */
    public function deleteAgentProfile($input) {
        $filter = $this->verifyAgentProfileParameters($input);
        $this->deleteData("pwrtla_xapidocuments", $filter);
    }

    /**
     * return activity profiles on /activities/profile (2.7)
     */
    public function queryActivityProfiles($input) {
        $filter = $input->getParameter(["activityId", "profileId"], "query");
        $filter["restype"] = "activities/profile";

        // if (!$input->hasParameter("activityId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        if ($input->hasParameter("profileId", "query")) {
            $this->data =$this->findDocumentByAttr($filter);
        }
        else{
            if ($input->hasParameter("since", "query")) {
                $filter["issued"] = [
                    $this->handleTimestamp($input->getParameter("since", "query")),
                    null
                ];
            }
            $this->getDocumentStream($filter);
        }
    }

    /**
     * return agent profiles
     */
    public function storeActivityProfile($input) {
        $filter = $this->verifyActivityProfileParameters($input);
        $this->addDocument($input->getBody(), $filter);
    }

    /**
     * return agent profiles
     */
    public function updateActivityProfile($input) {
        $filter = $this->verifyActivityProfileParameters($input);
        $this->updateDocument($input->getBody(), $filter);
    }

    /**
     * return agent profiles
     */
    public function deleteActivityProfile($input) {
        $filter = $this->verifyActivityProfileParameters($input);
        $this->deleteData("pwrtla_xapidocuments", $filter);
    }

    /**
     * return activity profiles (2.3)
     */
    public function queryActivityStates($input) {
        $filter = $input->getParameter(["activityId", "agent", "stateId", "registration"], "query");
        $filter["restype"] = "activities/state";

        // if (!$input->hasParameter("agent", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }
        //
        // if (!$input->hasParameter("activityId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        if ($input->hasParameter("stateId", "query")) {
            $this->data =$this->findDocumentByAttr($filter);
        }
        else {
            if ($input->hasParameter("since", "query")) {
                $filter["issued"] = [
                    $this->handleTimestamp($input->getParameter("since", "query")),
                    null
                ];
            }
            $this->getDocumentStream($filter);
        }
    }

    /**
     * return agent profiles
     */
    public function storeActivityState($input) {
        $filter = $this->verifyActivityStateParameters($input);
        $this->addDocument($input->getBody(), $filter);
    }

    /**
     * return agent profiles
     */
    public function updateActivityState($input) {
        $filter = $this->verifyActivityStateParameters($input);
        $this->updateDocument($input->getBody(), $filter);
    }

    /**
     * return agent profiles
     */
    public function deleteActivityState($input) {
        $filter = $this->verifyActivityStateParameters($input, false);
        $this->deleteData("pwrtla_xapidocuments", $filter);
    }

    /** **********************************************************************
     * Output methods
     *  **********************************************************************
     */

    public function hasData() {
        return (isset($this->deferFetch) || parent::hasData());
    }

    public function handleData($output) {
        if ($this->deferFetch) {
            $output->data("[");

            call_user_func(array($this, $this->deferFetch), $output);

            $output->data("]");
        }
        else {
            parent::handleData($output);
        }
    }

    protected function getActivityStream($filter, $order = [], $limit = 0) {
        $this->deferFetch = "fetchStream";
        $this->table = "pwrtla_xapistatements";
        $this->fields = "statement";
        $this->filter = $this->fixFilter($filter);
        $this->order = $order;
        $this->limit = 0;
    }

    protected function getDocumentStream($filter) {
        $this->deferFetch = "fetchStream";
        $this->table = "pwrtla_xapidocuments";
        $this->fields = "document";
        $this->filter = $this->fixFilter($filter);
        $this->order = [];
        $this->limit = 0;
    }

    /** **********************************************************************
     * Operation helper methods
     *  **********************************************************************
     */

    final protected function handleXapiStatement($xapiStatement) {
        $insert = [];

        // a better way would be using a JSON schema definition
        if (!(array_key_exists("actor", $xapiStatement) &&
              array_key_exists("verb", $xapiStatement) &&
              array_key_exists("object", $xapiStatement))) {
            throw new \PowerTLA\Exception\InvalidXapiStatement();
        }

        // get the verb id
        if (!array_key_exists("id", $xapiStatement["verb"]) &&
            !empty($xapiStatement["verb"]["id"])) {
            throw new \PowerTLA\Exception\InvalidXapiStatement();
        }

        // get the object id
        if (!array_key_exists("objectType", $xapiStatement["object"])) {
            throw new \PowerTLA\Exception\InvalidXapiStatement();
        }

        try {
            $userid = $this->getActorUserId($xapiStatement["actor"]);
        }
        catch (Exception $err) {
            throw new \PowerTLA\Exception\InvalidXapiStatement();
        }

        if (!$userid) {
            throw new \PowerTLA\Exception\InvalidXapiStatement();
        }

        $insert["userid"] = $userid;

        if (!array_key_exists("objectType", $xapiStatement)) {
            list($storedTs, $storedStr) = $this->generateTimestamp();
            if (!array_key_exists("id", $xapiStatement)) {
                $id = $this->generateUUID();
                $xapiStatement["id"] = $id;
            }

            $insert["id"] = $id;
            $insert["stored"] = $storedTs;
            $xapiStatement["stored"] = $storedStr;

            if (!array_key_exists("timestamp", $xapiStatement)) {
                $xapiStatement["timestamp"] = $storedStr;
                $insert["issued"] = $storedTs;
            }
        }

        // set the userid
        $insert["userid"] = $userid;

        // set the verb_id
        $insert["verb_id"] = $xapiStatement["verb"]["id"];

        // set the object_id if needed
        $oT = $xapiStatement["object"]["objectType"];
        switch ($oT) {
            case "Agent":
            case "Group":
                try {
                    $uid = $this->getActorUserId($xapiStatement["object"]);
                }
                catch (Exception $err) {
                    throw new \PowerTLA\Exception\InvalidXapiStatement();
                }
                if (!$uid) {
                    throw new \PowerTLA\Exception\InvalidXapiStatement();
                }
                break;
            case "SubStatement":
                $this->handleXapiStatement($xapiStatement["object"]);
                break;
            case "StatementRef":
            case "Activity":
                if(!array_key_exists("id", $xapiStatement["object"]) &&
                   !empty($xapiStatement["object"]["id"])) {
                    throw new \PowerTLA\Exception\InvalidXapiStatement();
                }
                $insert["object_id"] = $xapiStatement["object"]["id"];
                break;
            default:
                throw new \PowerTLA\Exception\InvalidXapiStatement();
                break;
        }
        if(!array_key_exists("id", $xapiStatement["object"]) &&
           !empty($xapiStatement["verb"]["id"])) {
            throw new \PowerTLA\Exception\InvalidXapiStatement();
        }

        if (!array_key_exists("objectType", $xapiStatement)) {

            if (array_key_exists("result", $xapiStatement)) {
                // get the score
                if (array_key_exists("score", $xapiStatement["result"]) &&
                    array_key_exists("raw", $xapiStatement["result"]["score"])) {
                    $insert["score"] = $xapiStatement["result"]["score"]["raw"];
                }
                // get the activity duration
                if (array_key_exists("duration", $xapiStatement["result"])) {
                    // transpose duration
                    try {
                        $iv = new DateInterval($xapiStatement["result"]["duration"]);
                    }
                    catch (Exception $err) {
                        throw new \PowerTLA\Exception\InvalidXapiStatement();
                    }
                    $insert["duration"] = (new DateTime("@0"))->add($iv)->getTimestamp();
                }
            }

            // get the registration (if any)
            if (array_key_exists("context", $xapiStatement) &&
                array_key_exists("registration", $xapiStatement["context"]) &&
                empty($xapiStatement["context"]["registration"])) {

                $insert["registration"] = $xapiStatement["context"]["registration"];
            }

            $insert["statement"] = json_encode($xapiStatement);
            // partition the issued time
            // trim timezone
            $ts = trim($xapiStatement["timestamp"], "Z");
            list($ts, $rest) = explode('+', $ts);
            // trim second fractions
            list($ts, $rest) = explode('.', $ts);
            list($a,$b) = explode("T", $ts);

            $ts = $d = explode('-', $a);
            if (!empty($b)) {
                $ts = array_merge($ts, explode(':', $b));
            }

            if (count($d) == 2) {
                // ordinal dates are not supported.
                throw new \RESTling\Exception\NotImplemented();
            }

            $tsl = explode(" ", "tsyear tsmonth tsday tshour tsminute tssecond");
            for ($i = 0; $i < count($ts); $i++) {
                if ($ts[$i] > 0) {
                    $insert[$tsl[$i]] = $ts[$i];
                }
            }

            // handle object voiding
            if ($insert["verb_id"] == self::VERB_VOIDED) {
                $this->voidStatement($insert["object_id"], $insert["id"]);
            }

            // finally insert the statement
            $this->addData("pwrtla_xapistatements", $insert);
        }
    }

    final protected function compareXapiObject($o, $n) {
        foreach ($o as $i => $v) {
            // skip "stored"
            if ($i !== "stored") {
                if (!array_key_exists($k, $n)) {
                    throw new \RESTling\Exception\Conflict();
                }
                $this->compareXapiElement($o[$i], $n[$i]);
            }
        }
    }

    final protected function compareXapiArray($o, $n) {
        if (count($o) != count($n)) {
            throw new \RESTling\Exception\Conflict();
        }

        $c = count($o);
        for ($i = 0; $i < $c; $i++) {
            $this->compareXapiElement($o[$i], $n[$i]);
        }
    }

    final protected function compareXapiElement($o, $n) {
        if (gettype($o) != gettype($n)) {
            throw new \RESTling\Exception\Conflict();
        }
        if (is_object($o)) {
            $this->compareXapiObject($o, $n);
        }
        elseif (is_array($o)) {
            $this->compareXapiArray($o, $n);
        }
        elseif ($o !== $n) {
            throw new \RESTling\Exception\Conflict();
        }
    }

    final protected function voidStatement($uuid, $voiduuid) {
        if (!empty($voideduuid)) {
            $statement = $this->findStatementByUUID($uuid);
            if (!$statement) {
                throw new \PowerTLA\Exception\InvalidXapiStatement();
            }
            $this->updateData("pwrtla_xapistatements", ["id" => $uuid,
                                                        "voided" => $voiduuid]);
        }
    }

    private function verifyActivityStateParameters($input, $single = true) {
        $filter = $input->getParameter(["activityId", "agent", "stateId", "registration"], "query");
        $filter["restype"] = "activities/state";

        // if (!$input->hasParameter("agent", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }
        //
        // if (!$input->hasParameter("activityId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }
        //
        // if ($single && !$input->hasParameter("stateId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        if ($input->hasParameter("registration", "query")) {
            $filter["registration"] = $input->getParameter("registration", "query");
        }
        return $filter;
    }

    private function verifyActivityProfileParameters($input) {
        $filter = $input->getParameter(["activityId", "profileId"], "query");
        $filter["restype"] = "activities/profile";

        // if (!$input->hasParameter("activityId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }
        //
        // if (!$input->hasParameter("profileId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        return $filter;
    }

    private function verifyAgentProfileParameters($input) {
        $filter = $input->getParameter(["agent", "profileId"], "query");
        $filter["restype"] = "agents/profile";

        // if (!$input->hasParameter("agent", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }
        //
        // if (!$input->hasParameter("profileId", "query")) {
        //     throw new \RESTling\Exception\OpenAPI\MissingRequiredParameter();
        // }

        return $filter;
    }

    final protected function fixFilter($filter) {
        if ($filter && is_array($filter) && !empty($filter)) {
            $fmap = [
                "activity"   => "object_id",
                "activityId" => "object_id",
                "verb"       => "verb_id",
                "stateId"    => "id",
                "profileId"  => "id",
                "agent"      => "userid"
            ];
            foreach ($filter as $k => $v) {
                if (array_key_exists($k, $fmap)) {
                    if ($k == "agent") {
                        $filter[$fmap[$k]] = $this->getActorUserId($v);
                    }
                    else {
                        $filter[$fmap[$k]] = $v;
                    }
                    unset($filter[$k]);
                }
            }
        }
        return $filter;
    }

    protected function getActorUserId($actorObject) {
        if (empty($actorObject)) {
            throw new \PowerTLA\Exception\MissingActorIdentifier();
        }

        if (is_string($actorObject)) {
            $actorObject = json_decode($actorObject, true);
        }

        $wfm = $this->getWebfingerModel($account[0]);
        if (!$wfm) {
            throw new \PowerTLA\Exception\MissingWebfingerModel();
        }

        if (array_key_exists("mbox", $actorObject)) {
            $account = explode(":", $actorObject["mbox"], 2);

            switch ($account[0]) {
                case "mailto":
                    return $wfm->findSubjectByEMail($account[1]);
                    break;
                case "acct":
                    // an acct also allows setting the context
                    return $wfm->findSubjectByAcct($account[1]);
                    break;
                default:
                    throw new \PowerTLA\Exception\InvalidActorIdentifier();
                    break;
            }
        }

        if (array_key_exists("openid", $actorObject)) {
            return $wfm->findSubjectByOpenId($actorObject["openid"]);
        }

        if (array_key_exists("account", $actor) &&
            array_key_exists("homepage", $actor["account"]) &&
            !empty($actor["account"]["homepage"]))
        {
            return $wfm->findSubjectByHomepage($actor["account"]["homepage"]);
        }

        // No actor identifier found in the actorObject.
        throw new \PowerTLA\Exception\MissingActorIdentifier();
    }

    protected function findStatementByUUID($uuid, $voided = false) {
        $statement = $this->findDataByAttr("pwrtla_xapistatements", ["id" => $uuid], ["statement", "voided", "userid"]);

        if (empty($statement)) {
            throw new \RESTling\Exception\NotFound();
        }

        if (($voided && empty($statement['voided'])) ||
           !($voided || empty($statement['voided']))) {
            throw new \RESTling\Exception\NotFound();
        }

        $statement['statement'] = json_decode($statement['statement'], true);

        return $statement['statement'];
    }

    protected function findStatementSetByUUID($uuid) {
        $retset = $this->findDataByAttr("pwrtla_xapistatements", ["id" => $uuid]);
        if ($retset) {
            $retset->statement = json_decode($retset->statement, true);
        }
        return (array)$retset;
    }

    protected function filterStatementByAttr($attrMap) {
        if (is_array($attrMap)) {
            return $this->filterDataByAttr("pwrtla_xapistatements", $attrMap, ["statement", "voided"]);
        }
        return null;
    }

    protected function addStatement($statement, $options) {
        $recs = $this->filterDataByAttr("pwrtla_xapistatements", $options, ['id']);

        if (!empty($recs)) {
            throw new \PowerTLA\Exception\InvalidXapiStatementAddOptions();
        }
        if (isset($statement) && !is_string($statement)) {
            $statement = json_encode($statement);
        }

        if (empty($statement)) {
            throw new \PowerTLA\Exception\EmptyXapiStatementAdd();
        }

        $options["statement"] = $statement;

        $this->addData("pwrtla_xapistatements", $options);
    }

    protected function updateStatement($document, $options) {
        $recs = $this->filterDataByAttr("pwrtla_xapistatements", $options);

        if (count($recs) != 1) {
            throw new \PowerTLA\Exception\InvalidXapiStatementUpdateOptions();
        }

        $rec = (array)($recs[0]);

        if (empty($rec["voided"])) {
            // if the statement is voided then we ignore the update
            if (!is_string($document)) {
                $document = json_encode($document);
            }

            if (empty($document)) {
                throw new \PowerTLA\Exception\EmptyXapiStatementUpdate();
            }

            $updateOptions = ["id" => $rec["id"], "statement" => $document];

            $this->updateData("pwrtla_xapistatements", $updateOptions);
        }
    }

    protected function findDocumentByUUID($uuid) {
        $document = $this->findDocumentByAttr(["id" => $uuid]);
        if (!empty($document)) {
            $document = json_decode($document, true);
        }
        return $document;
    }

    protected function findDocumentByAttr($filter) {
        return $this->findDataByAttr("pwrtla_xapidocuments", $filter, ["document"]);
    }

    protected function addDocument($document, $options) {
        $recs = $this->filterDataByAttr("pwrtla_xapidocuments", $options);

        if (!empty($recs)) {
            throw new \PowerTLA\Exception\InvalidXapiDocumentAddOptions();
        }
        if (isset($document) && !is_string($document)) {
            $document = json_encode($document);
        }

        if (empty($document)) {
            throw new \PowerTLA\Exception\EmptyXapiDocumentAdd();
        }

        $options["document"] = $document;
        // add stored and updated attributes
        list($stored, $updated) = $this->getTimestamp();

        $options["stored"] = $stored;
        $options["updated"] = $updated;

        $this->addData("pwrtla_xapidocuments", $options);
    }

    protected function updateDocument($document, $options) {
        $recs = $this->filterDataByAttr("pwrtla_xapidocuments", $options);

        if (count($recs) != 1) {
            throw new \PowerTLA\Exception\InvalidXapiDocumentUpdateOptions();
        }

        $rec = $recs[0];
        if (!is_string($document)) {
            $document = json_encode($document);
        }

        if (empty($document)) {
            throw new \PowerTLA\Exception\EmptyXapiDocumentUpdate();
        }

        $updateOptions = ["id" => $rec->id, "document" => $document];
        list($stored, $updated) = $this->getTimestamp();

        $updateOptions["updated"] = $updated;

        $this->updateData("pwrtla_xapidocuments", $updateOptions);
    }

    /**
     * Returns the pathmap of the model.
     *
     * This is automatically generated from the API specification. You can
     * safely ignore this part.
     *
     * Note: on API changes, this method may change too.
     */
    final public function getPathMap() {
        return array (
              0 =>
              array (
                'pattern' => '/^\\/activities\\/profile(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'queryActivityProfiles',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                      ),
                      1 =>
                      array (
                        'name' => 'since',
                        'in' => 'query',
                        'description' => 'Only ids of Profiles stored since the specified Timestamp (exclusive) are returned.
            ',
                        'type' => 'string',
                      ),
                      2 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'put' =>
                  array (
                    'operationId' => 'storeActivityProfile',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'post' =>
                  array (
                    'operationId' => 'updateActivityProfile',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'delete' =>
                  array (
                    'operationId' => 'deleteActivityProfile',
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/activities/profile',
              ),
              1 =>
              array (
                'pattern' => '/^\\/activities\\/state(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'queryActivityStates',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this state.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'actor',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      2 =>
                      array (
                        'name' => 'registration',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state.
            ',
                        'type' => 'string',
                      ),
                      3 =>
                      array (
                        'name' => 'stateid',
                        'in' => 'query',
                        'description' => 'The id for this state, within the given context.
            Required for retrieving a single state
            ',
                        'type' => 'string',
                      ),
                      4 =>
                      array (
                        'name' => 'since',
                        'in' => 'query',
                        'description' => 'Only ids of states stored since the specified Timestamp
            (exclusive) are returned.
            ',
                        'type' => 'string',
                      ),
                    ),
                  ),
                  'put' =>
                  array (
                    'operationId' => 'storeActivityState',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this state.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'actor',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      2 =>
                      array (
                        'name' => 'registration',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state.
            ',
                        'type' => 'string',
                      ),
                      3 =>
                      array (
                        'name' => 'stateid',
                        'in' => 'query',
                        'description' => 'The id for this state, within the given context.
            Required for retrieving a single state
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'post' =>
                  array (
                    'operationId' => 'updateActivityState',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this state.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'actor',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      2 =>
                      array (
                        'name' => 'registration',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state.
            ',
                        'type' => 'string',
                      ),
                      3 =>
                      array (
                        'name' => 'stateid',
                        'in' => 'query',
                        'description' => 'The id for this state, within the given context.
            Required for retrieving a single state
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'delete' =>
                  array (
                    'operationId' => 'deleteActivityState',
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this state.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'actor',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      2 =>
                      array (
                        'name' => 'registration',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state.
            ',
                        'type' => 'string',
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/activities/state',
              ),
              2 =>
              array (
                'pattern' => '/^\\/agents\\/profile(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'queryAgentProfiles',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                      ),
                      1 =>
                      array (
                        'name' => 'since',
                        'in' => 'query',
                        'description' => 'Only ids of Profiles stored since the specified Timestamp (exclusive) are returned.
            ',
                        'type' => 'string',
                      ),
                      2 =>
                      array (
                        'name' => 'agent',
                        'in' => 'query',
                        'description' => 'The Agent associated with this profile document. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'put' =>
                  array (
                    'operationId' => 'storeAgentProfile',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'agent',
                        'in' => 'query',
                        'description' => 'The Agent associated with this profile document. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'post' =>
                  array (
                    'operationId' => 'updateAgentProfile',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'agent',
                        'in' => 'query',
                        'description' => 'The Agent associated with this profile document. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                  'delete' =>
                  array (
                    'operationId' => 'deleteAgentProfile',
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'profileID',
                        'in' => 'query',
                        'description' => 'The profile id associated with this Profile document.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                      1 =>
                      array (
                        'name' => 'agent',
                        'in' => 'query',
                        'description' => 'The Agent associated with this profile document. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/agents/profile',
              ),
              3 =>
              array (
                'pattern' => '/^\\/activities(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'loadActivityDescription',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'activityId',
                        'in' => 'query',
                        'description' => 'The Activity id associated with this state.
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/activities',
              ),
              4 =>
              array (
                'pattern' => '/^\\/statements(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'queryStatements',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'statementId',
                        'in' => 'query',
                        'description' => 'Id of Statement to fetch
            ',
                        'type' => 'string',
                      ),
                      1 =>
                      array (
                        'name' => 'voidedStatementId',
                        'in' => 'query',
                        'description' => 'Id of voided Statement to fetch.
            ',
                        'type' => 'string',
                      ),
                      2 =>
                      array (
                        'name' => 'agent',
                        'in' => 'query',
                        'description' => 'Filter, only return Statements for which the specified Agent
            or Group is the Actor or Object of the Statement.
            ',
                        'type' => 'string',
                      ),
                      3 =>
                      array (
                        'name' => 'verb',
                        'in' => 'query',
                        'description' => 'Filter, only return Statements matching the specified Verb id.
            ',
                        'type' => 'string',
                      ),
                      4 =>
                      array (
                        'name' => 'activity',
                        'in' => 'query',
                        'description' => 'Filter, only return Statements for which the Object of the
            Statement is an Activity with the specified id.
            ',
                        'type' => 'string',
                      ),
                      5 =>
                      array (
                        'name' => 'registration',
                        'in' => 'query',
                        'description' => 'Filter, only return Statements matching the specified
            registration id. Note that although frequently a unique
            registration will be used for one Actor assigned to one
            Activity, this cannot be assumed. If only Statements for a
            certain Actor or Activity are required, those parameters also
            need to be specified.
            ',
                        'type' => 'string',
                      ),
                      6 =>
                      array (
                        'name' => 'related_activities',
                        'in' => 'query',
                        'description' => 'Apply the Activity filter broadly. Include Statements for
            which the Object, any of the context Activities, or any of
            those properties in a contained SubStatement match the
            Activity parameter, instead of that parameter\'s normal
            behavior. Matching is defined in the same way it is for the
            "activity" parameter.
            ',
                        'type' => 'boolean',
                      ),
                      7 =>
                      array (
                        'name' => 'related_agents',
                        'in' => 'query',
                        'description' => 'Apply the Agent filter broadly. Include Statements for which
            the Actor, Object, Authority, Instructor, Team, or any of
            these properties in a contained SubStatement match the Agent
            parameter, instead of that parameter\'s normal behavior.
            Matching is defined in the same way it is for the "agent"
            parameter.
            ',
                        'type' => 'boolean',
                      ),
                      8 =>
                      array (
                        'name' => 'since',
                        'in' => 'query',
                        'description' => 'Only Statements stored since the specified Timestamp
            (exclusive) are returned.
            ',
                        'type' => 'string',
                      ),
                      9 =>
                      array (
                        'name' => 'until',
                        'in' => 'query',
                        'description' => 'Only Statements stored at or before the specified
            Timestamp are returned.
            ',
                        'type' => 'string',
                      ),
                      10 =>
                      array (
                        'name' => 'limit',
                        'in' => 'query',
                        'description' => 'Maximum number of Statements to return. 0 indicates return
            the maximum the server will allow.
            ',
                        'type' => 'integer',
                      ),
                      11 =>
                      array (
                        'name' => 'format',
                        'in' => 'query',
                        'description' => 'defines the statement format. Possible values are ids, exact,
            and cannonical
            ',
                        'type' => 'string',
                      ),
                      12 =>
                      array (
                        'name' => 'attachments',
                        'in' => 'query',
                        'description' => 'If true, the LRS uses the multipart response format and
            includes all attachments as described previously. If false,
            the LRS sends the prescribed response with Content-Type
            application/json and does not send attachment data.
            ',
                        'type' => 'boolean',
                      ),
                      13 =>
                      array (
                        'name' => 'ascending',
                        'in' => 'query',
                        'description' => 'If true, return results in ascending order of stored time
            ',
                        'type' => 'boolean',
                      ),
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                  ),
                  'put' =>
                  array (
                    'operationId' => 'storeSingleStatement',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'statementId',
                        'in' => 'query',
                        'description' => 'Id of Statement to update
            ',
                        'type' => 'string',
                      ),
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                  ),
                  'post' =>
                  array (
                    'operationId' => 'storeStatements',
                    'consumes' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      204 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/statements',
              ),
              5 =>
              array (
                'pattern' => '/^\\/agents(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'loadAgentResource',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                    'parameters' =>
                    array (
                      0 =>
                      array (
                        'name' => 'agent',
                        'in' => 'query',
                        'description' => 'The Agent associated with this state. (JSON object)
            ',
                        'type' => 'string',
                        'required' => true,
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/agents',
              ),
              6 =>
              array (
                'pattern' => '/^\\/about(?:\\/(.+))?$/',
                'pathitem' =>
                array (
                  'get' =>
                  array (
                    'operationId' => 'xapiVersion',
                    'produces' =>
                    array (
                      0 => 'application/json',
                    ),
                    'responses' =>
                    array (
                      200 =>
                      array (
                        'description' => 'Successful response',
                      ),
                    ),
                  ),
                ),
                'vars' =>
                array (
                ),
                'path' => '/about',
              ),
            );
    }

    /**
     * Returns the version of the API spec
     */
    final public function getVersion() {
        return '1.0.3';
    }

    /**
     * Returns the rsd protocol of the API
     */
    final public function getProtocol() {
        return 'gov.adlnet.xapi.communication';
    }

    protected function generateUUID()
    {
        $uuid = sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
                        mt_rand( 0, 0xffff ),
                        mt_rand( 0, 0xffff ),
                        mt_rand( 0, 0xffff ),
                        mt_rand( 0, 0x0fff ) | 0x4000,
                        mt_rand( 0, 0x3fff ) | 0x8000,
                        mt_rand( 0, 0xffff ),
                        mt_rand( 0, 0xffff ),
                        mt_rand( 0, 0xffff ));

        $this->statement["id"] = trim($uuid);
        return $this->statement["id"];
    }

    protected function generateTimestamp()
    {
        $dt = new DateTime('NOW');
        return [$dt->getTimestamp(), $dt->format(DateTime::ISO8601)];
    }

    protected function handleTimestamp($time) {
        $retval = null;
        if (!empty($time)) {
            try {
                $ts = new DateTime($time);
            }
            catch (Exception $err) {
                throw new \PowerTLA\Exception\InvalidXapiStatementFilter();
            }
            $retval = $ts->getTimestamp();
        }
        return $retval;
    }
}

?>
